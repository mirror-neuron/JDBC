■■■ CallableStatement ■■■

1. CallableStatement 인터페이스는 모든 DBMS들에 대한
   표준 방법으로 저장 프로시저(stored procedure)를 호출하는 방법을
   제공하는 인터페이스이며,
   호출은 두 가지 형태 중의 하나인 escape 문법으로 작성되어진다.

2. 결과 매개변수를 가지는 형태와 결과 매개변수가 없는 형태(두 가지)이며
   OUT 매개변수의 종류인 결과 매개변수는 
   저장 프로시저에 대한 리턴 값이다.
   두 형태 모두 IN 매개변수(입력), OUT 매개변수(출력), INOUT 매개변수(입출력)
   를 위해 사용되어지는 매개변수의 변수 번호를 가지며
   『?』는 매개변수의 저장 위치로 나타낸다.

3. 형식 및 구조
   (JDBC 에서 저장 프로시저 호출을 위한 문법)

   매개변수가 없는 저장 프로시저 호출
   {call procedure_name}

   IN 매개변수를 리턴하는 프로시저 호출
   {call procedure_name[(?, ?, ...)]}

   OUT 매개변수를 리턴하는 프로시저 호출
   {? = call procedure_name[(?, ?, ...)]}

4. CallableStatement 객체 생성
   CallableStatement 객체는
   Connection 의 prepareCall() 메소드에 의해 생성된다.
   예를 들어, 두 개의 인자값을 가지고 있으며 결과 매개변수가 없는
   저장 프로시저 prcData 를 호출하는 방법은 다음과 같다.

   CallableStatement cstmt = conn.prepareCall("{call prcData(?, ?)}");

   ※ 물음표(『?』)의 위치가 IN, OUT, INOUT 매개변수 중
      어떤 것인가 하는 것은 저장 프로시저 proData에 의존한다.

5. IN, OUT 매개변수
   CallableStatement 객체로 IN 매개변수를 넘겨주는 것은
   PreparedStatement 로 부터 상속받은 setXXX() 메소드이다.
   예를 들어, setFloat() 메소드는 float 값을 넘겨주게 되는 것이다.

   만약 저장 프로시저가 OUT 매개변수를 리턴한다면
   각 OUT 매개변수의 SQL 형(Type)은 CallableStatement 객체를
   실행할 수 있는 상태가 되기 전에 등록되어져야 한다.
   이는 몇몇 DBMS들이 SQL형(Type)을 필요로 하기 때문이며
   이 때, SQL 형(Type)을 등록하는 것은 registerOutParameter() 메소드를 사용하게 된다.  
   그리고, SQL 구문이 실행되어진 다음에
   CallableStatement 의 getXXX() 메소드는 매개변수의 값을 검색하며,
   사용되는 정확한 getXXX() 메소드는 그 매개변수를 위해 등록되어진
   SQL 에 상응하는 자바 형(Type) 이다.
   즉, registerOutParameter() 메소드는 SQL 타입을 사용하고,
   getXXX() 메소드는 이것을 자바 타입으로 캐스트(cast) 하는 것이다.




  